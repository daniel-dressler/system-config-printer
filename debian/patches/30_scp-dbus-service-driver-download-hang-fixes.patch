diff -Nur -x '*.orig' -x '*~' system-config-printer-1.5.0+20140805/newprinter.py system-config-printer-1.5.0+20140805.new/newprinter.py
--- system-config-printer-1.5.0+20140805/newprinter.py	2014-08-05 22:28:57.119079719 +0200
+++ system-config-printer-1.5.0+20140805.new/newprinter.py	2014-08-05 22:30:05.023082526 +0200
@@ -1348,18 +1348,13 @@
                                     self._searchdialog.connect ("response", self._searchdialog_response)
                                     self._searchdialog.show_all ()
 
-                                    # Keep the UI refreshed while we wait for
-                                    # the drivers query to complete.
+                                    # TODO: make this asynchronous
                                     while self.drivers_lock.locked ():
-                                        while Gtk.events_pending ():
-                                            Gtk.main_iteration ()
                                         time.sleep (0.1)
 
                                     self._searchdialog.hide ()
                                     self._searchdialog.destroy ()
                                     self._searchdialog = None
-                                    while Gtk.events_pending ():
-                                        Gtk.main_iteration ()
 
                                 if self._searchdialog_canceled:
                                     # Cancel clicked
diff -Nur -x '*.orig' -x '*~' system-config-printer-1.5.0+20140805/scp-dbus-service.py system-config-printer-1.5.0+20140805.new/scp-dbus-service.py
--- system-config-printer-1.5.0+20140805/scp-dbus-service.py	2014-08-05 22:02:16.000000000 +0200
+++ system-config-printer-1.5.0+20140805.new/scp-dbus-service.py	2014-08-05 22:30:05.023082526 +0200
@@ -2,7 +2,7 @@
 
 ## system-config-printer
 
-## Copyright (C) 2010, 2011, 2012, 2013 Red Hat, Inc.
+## Copyright (C) 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
 ## Authors:
 ##  Tim Waugh <twaugh@redhat.com>
 
@@ -107,6 +107,7 @@
 
     def run (self):
         debugprint ("FetchPPDs: running")
+        self._ppds = None
         self._cupsconn.getPPDs2 (reply_handler=self._cups_getppds_reply,
                                  error_handler=self._cups_error)
 
@@ -165,6 +166,10 @@
         self.error_handler (exc)
 
     def _ppds_ready (self, fetchedppds):
+        if not fetchedppds.is_ready ():
+            # PPDs being reloaded. Wait for next 'ready' signal.
+            return
+
         self._disconnect_signals ()
         ppds = fetchedppds.get_ppds ()
 
@@ -194,6 +199,33 @@
                                                           fit=fit)
             ppdname = ppdnamelist[0]
             status = fit[ppdname]
+
+            try:
+                if status != "exact" and not self.download_tried:
+                    self.download_tried = True
+                    self.dialog = newprinter.NewPrinterGUI()
+                    self.dialog.NewPrinterWindow.set_modal (False)
+                    self.handles = \
+                                   [self.dialog.connect ('dialog-canceled',
+                                                         self.on_dialog_canceled),
+                                    self.dialog.connect ('driver-download-checked',
+                                                         self.on_driver_download_checked)]
+
+                    self.reply_if_fail = [(x, fit[x]) for x in ppdnamelist]
+                    if not self.dialog.init ('download_driver',
+                                             devid=self.device_id):
+                        try:
+                            g_killtimer.remove_hold ()
+                        finally:
+                            e = RuntimeError ("Failed to launch dialog")
+                            self.error_handler (r)
+
+                    return
+            except:
+                # Ignore driver download if packages needed for the GUI are not
+                # installed or if no windows can be opened
+                pass
+
             g_killtimer.remove_hold ()
             self.reply_handler ([(x, fit[x]) for x in ppdnamelist])
         except Exception as e:
@@ -204,13 +236,29 @@
 
             self.error_handler (e)
 
+    def _destroy_dialog (self):
+        for handle in self.handles:
+            self.dialog.disconnect (handle)
+
+        self.dialog.destroy ()
+        del self.dialog
+
     def on_driver_download_checked(self, obj, installed_files):
-        self.installed_files = installed_files
-        self.loop.quit ()
+        if len (installed_files) > 0:
+            debugprint ("GetBestDrivers request: Re-fetch PPDs after driver download")
+            self._signals.append (g_ppds.connect ('ready', self._ppds_ready))
+            self._signals.append (g_ppds.connect ('error', self._ppds_error))
+            g_ppds.run ()
+            return
+
+        g_killtimer.remove_hold ()
+        self._destroy_dialog ()
+        self.reply_handler (self.reply_if_fail)
 
     def on_dialog_canceled(self, obj):
-        self.installed_files = []
-        self.loop.quit ()
+        g_killtimer.remove_hold ()
+        self._destroy_dialog ()
+        self.reply_handler (self.reply_if_fail)
 
 class GroupPhysicalDevicesRequest:
     def __init__ (self, devices, reply_handler, error_handler):
@@ -284,6 +332,7 @@
         debugprint ("+%s" % self)
 
     def __del__ (self):
+        self.dialog.destroy ()
         debugprint ("-%s" % self)
 
     @dbus.service.method(dbus_interface=CONFIG_NEWPRINTERDIALOG_IFACE,
@@ -343,24 +392,28 @@
         pass
 
     def on_dialog_canceled(self, obj):
+        debugprint ("%s: dialog canceled" % self)
         g_killtimer.remove_hold ()
         self.DialogCanceled ()
         self.remove_handles ()
         self.remove_from_connection ()
 
     def on_printer_added(self, obj, name):
+        debugprint ("%s: printer added" % self)
         g_killtimer.remove_hold ()
         self.PrinterAdded (name)
         self.remove_handles ()
         self.remove_from_connection ()
 
     def on_printer_modified(self, obj, name, ppd_has_changed):
+        debugprint ("%s: printer modified" % self)
         g_killtimer.remove_hold ()
         self.PrinterModifed (name, ppd_has_changed)
         self.remove_handles ()
         self.remove_from_connection ()
 
     def on_driver_download_checked(self, obj, installed_files):
+        debugprint ("%s: driver download checked" % self)
         g_killtimer.remove_hold ()
         self.DriverDownloadChecked (installed_files)
         self.remove_handles ()
